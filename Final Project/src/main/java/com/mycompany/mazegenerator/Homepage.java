/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mazegenerator;
import javax.swing.*;
import java.awt.*;
import java.util.Stack;

/**
 *
 * @author snyou
 */
public class Homepage extends javax.swing.JFrame {

    /**
     * Creates new form Homepage
     */
    private Grid grid;
    private int width;
    private int height;
    private int cellSize;
    private Graphics g;
    private Stack<Cell> solutionStack;
    private int stackIndex;
    
    public Homepage() {
        initComponents();
        previousButton.setVisible(false);
        nextButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mazePanel = new javax.swing.JPanel();
        widthLabel = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();
        widthField = new javax.swing.JTextField();
        heightLabel = new javax.swing.JLabel();
        heightField = new javax.swing.JTextField();
        solveButton = new javax.swing.JButton();
        checkbox = new javax.swing.JCheckBox();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mazePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout mazePanelLayout = new javax.swing.GroupLayout(mazePanel);
        mazePanel.setLayout(mazePanelLayout);
        mazePanelLayout.setHorizontalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mazePanelLayout.setVerticalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );

        widthLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        widthLabel.setText("Width:");

        generateButton.setText("Generate Maze");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        heightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heightLabel.setText("Height:");

        solveButton.setText("Solve Maze");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        checkbox.setText("Solve One by One");
        checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxActionPerformed(evt);
            }
        });

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mazePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(widthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(widthField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(heightLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(generateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton)
                        .addGap(0, 84, Short.MAX_VALUE)))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(widthLabel)
                            .addComponent(clearButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(widthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(heightLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(generateButton)
                        .addComponent(solveButton)
                        .addComponent(checkbox)
                        .addComponent(previousButton)
                        .addComponent(nextButton)))
                .addGap(23, 23, 23)
                .addComponent(mazePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // TODO add your handling code here:
        try {
            width = Integer.parseInt(widthField.getText());
            height = Integer.parseInt(heightField.getText());
            
            if (width <= 50 && height <= 50) {
                grid = new Grid(width, height);
                MazeGenerator mazeGenerator = new MazeGenerator(grid);
                mazeGenerator.generateMaze(0, 0);

                MazeSolver mazeSolver = new MazeSolver(grid);
                solutionStack = mazeSolver.solveMaze(0, 0); // Store the result stack

                stackIndex = 1;

                g = mazePanel.getGraphics();
                mazePanel.paint(g); // Clear the panel

                cellSize = Math.min(mazePanel.getWidth() / width, mazePanel.getHeight() / height); // Scale cells to fit the panel

                drawBorders();
            } else {
                JOptionPane.showMessageDialog(null, "Make sure the width and height are both less than 50!", "", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Positive integers only!", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_generateButtonActionPerformed
    
    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        // TODO add your handling code here:
        try {      
            while (stackIndex < solutionStack.size() - 1) {
                g.setColor(Color.BLUE);  // Set color for solution cells

                Cell cell = solutionStack.get(stackIndex);
                
                int topLeftX = cell.getX() * cellSize + 1;
                int topLeftY = cell.getY() * cellSize + 1;
                g.fillRect(topLeftX, topLeftY, cellSize, cellSize); // Draw filled rectangle for each solution cell
                
                stackIndex++;
            }
            drawBorders();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Generate a maze first!", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_solveButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        try {
            g.setColor(Color.BLUE);  // Set color for solution cells

            if (stackIndex  > 0 && stackIndex < solutionStack.size() - 1) {
                Cell cell = solutionStack.get(stackIndex);
                
                int topLeftX = cell.getX() * cellSize + 1;
                int topLeftY = cell.getY() * cellSize + 1;
                g.fillRect(topLeftX, topLeftY, cellSize, cellSize); // Draw filled rectangle for each solution cell
                stackIndex++;
                drawBorders();
            } else {
                JOptionPane.showMessageDialog(null, "This is the end of the maze!", "", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Generate a maze first!", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxActionPerformed
        // TODO add your handling code here:
        if (checkbox.isSelected()) {
            previousButton.setVisible(true);
            nextButton.setVisible(true);
        } else {
            previousButton.setVisible(false);
            nextButton.setVisible(false);
        }
    }//GEN-LAST:event_checkboxActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        // TODO add your handling code here:
        try {
            g.setColor(Color.WHITE);  // Set color for solution cells

            if (stackIndex > 1 && stackIndex <= solutionStack.size()) {  // Ensures you don't erase the first cell (green)
                Cell cell = solutionStack.get(stackIndex - 1);

                int topLeftX = cell.getX() * cellSize + 1;
                int topLeftY = cell.getY() * cellSize + 1;
                g.fillRect(topLeftX, topLeftY, cellSize, cellSize); // Draw filled rectangle for each solution cell
                stackIndex--;  // Move back to the previous cell
                drawBorders();
            } else {
                JOptionPane.showMessageDialog(null, "This is the beginning of the maze!", "", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Generate a maze first!", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        try {   
            stackIndex = 1;
            while (stackIndex < solutionStack.size() - 1) {
                g.setColor(Color.WHITE);  // Set color for solution cells

                Cell cell = solutionStack.get(stackIndex);
                
                int topLeftX = cell.getX() * cellSize + 1;
                int topLeftY = cell.getY() * cellSize + 1;
                g.fillRect(topLeftX, topLeftY, cellSize, cellSize); // Draw filled rectangle for each solution cell
                
                stackIndex++;
            }
            drawBorders();
            stackIndex = 1;
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Generate a maze first!", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_clearButtonActionPerformed
        
    private void drawBorders() {
        g.setColor(Color.GREEN);
        g.fillRect(1, 1, cellSize, cellSize);

        g.setColor(Color.RED);
        g.fillRect((width - 1) * cellSize + 1, (height - 1) * cellSize + 1, cellSize, cellSize);
        
        g.setColor(Color.BLACK);  // Set color for walls

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int topLeftX = x * cellSize;
                int topLeftY = y * cellSize;

                // Draw all four walls for each cell
                if (grid.getCell(x, y).getWalls()[0] == true) {
                    g.drawLine(topLeftX, topLeftY, topLeftX + cellSize, topLeftY); // Top wall
                }
                if (grid.getCell(x, y).getWalls()[1] == true) {
                    g.drawLine(topLeftX + cellSize, topLeftY, topLeftX + cellSize, topLeftY + cellSize); // Right wall
                }
                if (grid.getCell(x, y).getWalls()[2] == true) {
                    g.drawLine(topLeftX, topLeftY + cellSize, topLeftX + cellSize, topLeftY + cellSize); // Bottom wall
                }
                if (grid.getCell(x, y).getWalls()[3] == true) {
                    g.drawLine(topLeftX, topLeftY, topLeftX, topLeftY + cellSize); // Left wall
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Homepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Homepage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkbox;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextField heightField;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JPanel mazePanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton solveButton;
    private javax.swing.JTextField widthField;
    private javax.swing.JLabel widthLabel;
    // End of variables declaration//GEN-END:variables
}
